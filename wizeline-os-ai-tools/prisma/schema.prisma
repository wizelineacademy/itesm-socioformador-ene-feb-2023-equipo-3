generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://coffeebreak:Wizeliner@localhost:5432/wizeline?schema=public"
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  About_me       About_me?
  accounts       Account[]
  Certification  Certification[]
  Contact_info   Contact_info?
  Education      Education[]
  General_skills General_skills[]
  Past_work      Past_work[]
  sessions       Session[]
  Vacancies      Vacancies[]
}

model Past_work {
  id_job      Int      @unique @default(autoincrement())
  id_employee String
  title       String
  description String
  start_date  DateTime
  finish_date DateTime
  employee    User     @relation(fields: [id_employee], references: [id])

  @@id([id_job, id_employee])
}

model Certification {
  id_certification Int    @unique @default(autoincrement())
  id_employee      String
  name             String
  image_url        String
  employee         User   @relation(fields: [id_employee], references: [id])

  @@id([id_certification, id_employee])
}

model Education {
  id_education     Int    @unique @default(autoincrement())
  id_employee      String
  schoolName       String
  degree           String
  specialization_1 String
  specialization_2 String
  employee         User   @relation(fields: [id_employee], references: [id])

  @@id([id_education, id_employee])
}

model Level {
  id_level       Int              @id @default(autoincrement())
  name           String
  General_skills General_skills[]
}

model General_skills {
  id_skills   Int    @default(autoincrement())
  id_employee String
  name        String
  id_level    Int
  employee    User   @relation(fields: [id_employee], references: [id])
  level       Level  @relation(fields: [id_level], references: [id_level])

  @@id([id_skills, id_employee])
}

model About_me {
  id_employee String @id
  description String
  employee    User   @relation(fields: [id_employee], references: [id])
}

model Rol_titles {
  id_rol_title      Int            @id @default(autoincrement())
  name              String
  name_abbreviation String?
  Contact_info      Contact_info[]
}

model Region {
  id_region    Int            @id @default(autoincrement())
  state        String
  city         String
  country      String
  Companies    Companies[]
  Contact_info Contact_info[]
}

model Contact_info {
  id_Contact        Int        @default(autoincrement())
  id_employee       String     @unique
  id_rol_title      Int
  id_region         Int?
  phone_number      String     @db.VarChar(20)
  employment_status Boolean?   @default(false)
  employee          User       @relation(fields: [id_employee], references: [id])
  Region            Region?    @relation(fields: [id_region], references: [id_region])
  rol               Rol_titles @relation(fields: [id_rol_title], references: [id_rol_title])

  @@id([id_Contact, id_employee])
}

model Companies {
  id_company Int        @id @default(autoincrement())
  name       String
  id_region  Int
  region     Region     @relation(fields: [id_region], references: [id_region])
  Projects   Projects[]
}

model Projects {
  id_project  Int         @id @default(autoincrement())
  id_company  Int
  name        String
  start_date  DateTime
  finish_date DateTime
  description String
  Company     Companies   @relation(fields: [id_company], references: [id_company])
  Vacancies   Vacancies[]
}

model Status {
  id_status Int         @id @default(autoincrement())
  name      String
  Vacancies Vacancies[]
}

model Vacancies {
  id_vacant        Int                @unique @default(autoincrement())
  id_project       Int
  id_employee      String
  id_status        Int
  name             String
  start_date       DateTime
  finish_date      DateTime
  description      String
  employee         User               @relation(fields: [id_employee], references: [id])
  project          Projects           @relation(fields: [id_project], references: [id_project])
  status           Status             @relation(fields: [id_status], references: [id_status])
  vacancies_skills vacancies_skills[]

  @@id([id_vacant, id_project])
}

model Vacant_skills {
  id_skill         Int                @id @default(autoincrement())
  name             String
  vacancies_skills vacancies_skills[]
}

model vacancies_skills {
  id_vacant Int
  id_skill  Int
  skill     Vacant_skills @relation(fields: [id_skill], references: [id_skill])
  vacant    Vacancies     @relation(fields: [id_vacant], references: [id_vacant])

  @@id([id_vacant, id_skill])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
